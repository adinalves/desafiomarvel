{"ast":null,"code":"var _jsxFileName = \"/Users/adinealves/Documents/DesafioStone1/src/pages/home/Home.js\";\nimport React from 'react';\n\nconst Home = () => {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"TESTE\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"Fill the fields to continue\"));\n};\n\nclass App {\n  constructor() {\n    this.mainContent = document.getElementById('main-content');\n    this.charactersContent = document.getElementById('characters-list');\n    this.homepageLink = document.getElementById('homepage');\n    this.inputSearch = document.getElementById('input-search');\n    this.buttonSearch = document.getElementById('button-search');\n    this.images = document.getElementsByClassName('img-button');\n    this.offset = 0;\n    this.getCharacters();\n    this.addEvents();\n  }\n\n  addEvents() {\n    this.buttonSearch.onclick = () => this.searchCharacter();\n  }\n\n  async getCharacters(name = null) {\n    try {\n      let url = \"http://localhost:3333/characters?offset=\".concat(this.offset);\n\n      if (name !== null) {\n        url += \"&nameStartsWith=\".concat(name);\n      }\n\n      const result = await axios.get(url);\n      this.populate(result.data.characters);\n      this.pagination(result.data.total);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getCharacterInfo(id) {\n    try {\n      const url = \"http://localhost:3333/characters/\".concat(id);\n      const result = await axios.get(url);\n      this.showCharacterInfo(result.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getComic(id) {\n    try {\n      const url = \"http://localhost:3333/comics/\".concat(id);\n      const result = await axios.get(url);\n      this.populateComic(result.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  populate(data) {\n    this.charactersContent.innerHTML = '';\n\n    if (data <= 0) {\n      this.charactersContent.innerHTML = \"<p><i class=\\\"fas fa-exclamation-circle\\\"></i> Oops! Character not found.</p>\";\n    }\n\n    data.forEach(item => {\n      if (item.thumbnail.path.includes('image_not_available')) {\n        const character = \"<div class=\\\"card m-2\\\" style=\\\"width: 200px\\\">\\n                            <img class=\\\"card-img-top img-button\\\" title=\\\"\".concat(item.name, \"\\\" data-id=\\\"\").concat(item.id, \"\\\" src=\\\"./img/marvel_default.png\\\" alt=\\\"\\\">\\n                            <div class=\\\"card-body\\\">\\n                              <h5 class=\\\"card-title text-center text-muted\\\">\").concat(item.name, \"</h5>\\n                            </div>\\n                          </div>\");\n        this.charactersContent.innerHTML += character;\n      } else {\n        const character = \"<div class=\\\"card m-2\\\" style=\\\"width: 200px\\\">\\n                            <img class=\\\"card-img-top img-button\\\" title=\\\"\".concat(item.name, \"\\\" data-id=\\\"\").concat(item.id, \"\\\" src=\\\"\").concat(item.thumbnail.path, \".\").concat(item.thumbnail.extension, \"\\\" alt=\\\"\\\">\\n                            <div class=\\\"card-body\\\">\\n                              <h5 class=\\\"card-title text-center text-muted\\\">\").concat(item.name, \"</h5>\\n                            </div>\\n                          </div>\");\n        this.charactersContent.innerHTML += character;\n      }\n    });\n\n    for (let image of this.images) {\n      image.onclick = event => this.getCharacterInfo(event.target.dataset.id);\n    }\n  }\n\n  pagination(total) {\n    document.querySelector('.pagination').innerHTML = '';\n    const pages = Math.ceil(total / 100);\n\n    for (let i = 1; i <= pages; i++) {\n      const li = \" <li class=\\\"page-item\\\">\\n                      <a class=\\\"page-link\\\" data-page=\\\"\".concat(i, \"\\\" href=\\\"#\\\">\").concat(i, \"</a>\\n                  </li>\");\n      document.querySelector('.pagination').innerHTML += li;\n    }\n\n    for (let link of document.querySelectorAll('.page-link')) {\n      link.onclick = event => {\n        const page = event.target.dataset.page;\n        this.offset = (page - 1) * 100;\n        this.getCharacters();\n      };\n    }\n  }\n\n  showCharacterInfo(data) {\n    const img = \"\".concat(data[0].thumbnail.path, \".\").concat(data[0].thumbnail.extension);\n    const name = data[0].name;\n    let description = data[0].description;\n    let comics = data[0].comics.items;\n\n    if (!description) {\n      description = 'Description not informed.';\n    }\n\n    for (const item of comics) {\n      const parts = item.resourceURI.split('comics/');\n      const id = parts[1];\n      this.getComic(id);\n    }\n\n    this.homepageLink.innerHTML = \"<i class=\\\"fas fa-long-arrow-alt-left mr-2\\\"></i> Back to homepage\";\n    this.inputSearch.parentNode.remove();\n    this.mainContent.innerHTML = \"<div class=\\\"row bg-light rounded-top p-3\\\">\\n                                          <div class=\\\"col-12 d-flex\\\">\\n                                              <div>\\n                                                <img src=\\\"\".concat(img, \"\\\" height=\\\"300\\\" alt=\\\"\\\">\\n                                              </div>\\n                                              <div class=\\\"card-body\\\">\\n                                                <h2 class=\\\"card-title mb-3\\\">\").concat(name, \"</h2><hr>\\n                                                <p class=\\\"card-text\\\"><span class=\\\"font-weight-bold\\\">Description: </span>\").concat(description, \"</p>\\n                                              </div>\\n                                          </div>\\n                                        </div>\\n                                        <div class=\\\"row bg-light rounded-bottom p-3\\\">\\n                                          <p class=\\\"col-12 font-weight-bold\\\">Comics: </p>\\n                                          <ul class=\\\"col-12\\\" id=\\\"hqs\\\"></ul>\\n                                        </div>\");\n  }\n\n  populateComic(comic) {\n    let title = comic[0].title.substr(0, 12);\n\n    if (comic[0].title.length >= 12) {\n      title += \"...\";\n    }\n\n    const li = \"<li class=\\\"list-inline-item\\\">\\n                  <a href=\\\"\".concat(comic[0].urls[0].url, \"\\\" target=\\\"_blank\\\">\\n                    <img width=\\\"100\\\" src=\\\"\").concat(comic[0].images[0].path, \".\").concat(comic[0].images[0].extension, \"\\\">\\n                  </a>\\n                  <p class=\\\"text-center\\\">\").concat(title, \"<p>\\n                </li>\");\n    document.querySelector('#hqs').innerHTML += li;\n  }\n\n  searchCharacter() {\n    const name = this.inputSearch.value.toUpperCase();\n    console.log(name);\n    name.length >= 3 ? this.getCharacters(name) : swal('Please, type at least 03 letters to do a search.');\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/adinealves/Documents/DesafioStone1/src/pages/home/Home.js"],"names":["React","Home","App","constructor","mainContent","document","getElementById","charactersContent","homepageLink","inputSearch","buttonSearch","images","getElementsByClassName","offset","getCharacters","addEvents","onclick","searchCharacter","name","url","result","axios","get","populate","data","characters","pagination","total","error","console","log","getCharacterInfo","id","showCharacterInfo","getComic","populateComic","innerHTML","forEach","item","thumbnail","path","includes","character","extension","image","event","target","dataset","querySelector","pages","Math","ceil","i","li","link","querySelectorAll","page","img","description","comics","items","parts","resourceURI","split","parentNode","remove","comic","title","substr","length","urls","value","toUpperCase","swal"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst Home = () => {\n\nreturn (\n    <>\n        <h1>TESTE</h1>\n        <p>Fill the fields to continue</p>\n        \n    </>\n)\n\n}\n\n\n\nclass App {\n  constructor() {\n    this.mainContent = document.getElementById('main-content');\n    this.charactersContent = document.getElementById('characters-list');\n    this.homepageLink = document.getElementById('homepage');\n    this.inputSearch = document.getElementById('input-search');\n    this.buttonSearch = document.getElementById('button-search');\n    this.images = document.getElementsByClassName('img-button');\n\n    this.offset = 0;\n\n    this.getCharacters();\n    this.addEvents();\n  }\n\n  addEvents() {\n    this.buttonSearch.onclick = () => this.searchCharacter();\n  }\n\n  async getCharacters(name = null) {\n    try {\n      let url = `http://localhost:3333/characters?offset=${this.offset}`;\n\n      if (name !== null) {\n        url += `&nameStartsWith=${name}`;\n      }\n\n      const result = await axios.get(url);\n\n      this.populate(result.data.characters);\n      this.pagination(result.data.total);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getCharacterInfo(id) {\n    try {\n      const url = `http://localhost:3333/characters/${id}`;\n\n      const result = await axios.get(url);\n\n      this.showCharacterInfo(result.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getComic(id) {\n    try {\n      const url = `http://localhost:3333/comics/${id}`;\n\n      const result = await axios.get(url);\n\n      this.populateComic(result.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  populate(data) {\n    this.charactersContent.innerHTML = '';\n\n    if (data <= 0) {\n      this.charactersContent.innerHTML = `<p><i class=\"fas fa-exclamation-circle\"></i> Oops! Character not found.</p>`;\n    }\n\n    data.forEach(item => {\n      if (item.thumbnail.path.includes('image_not_available')) {\n        const character = `<div class=\"card m-2\" style=\"width: 200px\">\n                            <img class=\"card-img-top img-button\" title=\"${item.name}\" data-id=\"${item.id}\" src=\"./img/marvel_default.png\" alt=\"\">\n                            <div class=\"card-body\">\n                              <h5 class=\"card-title text-center text-muted\">${item.name}</h5>\n                            </div>\n                          </div>`;\n\n        this.charactersContent.innerHTML += character;\n      } else {\n        const character = `<div class=\"card m-2\" style=\"width: 200px\">\n                            <img class=\"card-img-top img-button\" title=\"${item.name}\" data-id=\"${item.id}\" src=\"${item.thumbnail.path}.${item.thumbnail.extension}\" alt=\"\">\n                            <div class=\"card-body\">\n                              <h5 class=\"card-title text-center text-muted\">${item.name}</h5>\n                            </div>\n                          </div>`;\n\n        this.charactersContent.innerHTML += character;\n      }\n    });\n\n    for (let image of this.images) {\n      image.onclick = (event) => this.getCharacterInfo(event.target.dataset.id);\n    }\n  }\n\n  pagination(total) {\n    document.querySelector('.pagination').innerHTML = '';\n\n    const pages = Math.ceil(total / 100);\n\n    for (let i = 1; i <= pages; i++) {\n      const li = ` <li class=\"page-item\">\n                      <a class=\"page-link\" data-page=\"${i}\" href=\"#\">${i}</a>\n                  </li>`;\n      document.querySelector('.pagination').innerHTML += li;\n    }\n\n    for (let link of document.querySelectorAll('.page-link')) {\n      link.onclick = (event) => {\n        const page = event.target.dataset.page;\n        this.offset = (page - 1) * 100;\n\n        this.getCharacters();\n      };\n    }\n  }\n\n  showCharacterInfo(data) {\n    const img = `${data[0].thumbnail.path}.${data[0].thumbnail.extension}`;\n    const name = data[0].name;\n    let description = data[0].description;\n    let comics = data[0].comics.items;\n\n    if (!description) {\n      description = 'Description not informed.';\n    }\n\n    for (const item of comics) {\n      const parts = item.resourceURI.split('comics/');\n      const id = parts[1];\n\n      this.getComic(id);\n    }\n\n    this.homepageLink.innerHTML = `<i class=\"fas fa-long-arrow-alt-left mr-2\"></i> Back to homepage`;\n    this.inputSearch.parentNode.remove();\n    this.mainContent.innerHTML = `<div class=\"row bg-light rounded-top p-3\">\n                                          <div class=\"col-12 d-flex\">\n                                              <div>\n                                                <img src=\"${img}\" height=\"300\" alt=\"\">\n                                              </div>\n                                              <div class=\"card-body\">\n                                                <h2 class=\"card-title mb-3\">${name}</h2><hr>\n                                                <p class=\"card-text\"><span class=\"font-weight-bold\">Description: </span>${description}</p>\n                                              </div>\n                                          </div>\n                                        </div>\n                                        <div class=\"row bg-light rounded-bottom p-3\">\n                                          <p class=\"col-12 font-weight-bold\">Comics: </p>\n                                          <ul class=\"col-12\" id=\"hqs\"></ul>\n                                        </div>`;\n  }\n\n  populateComic(comic) {\n    let title = comic[0].title.substr(0, 12);\n\n    if (comic[0].title.length >= 12) {\n      title += \"...\";\n    }\n\n    const li = `<li class=\"list-inline-item\">\n                  <a href=\"${comic[0].urls[0].url}\" target=\"_blank\">\n                    <img width=\"100\" src=\"${comic[0].images[0].path}.${comic[0].images[0].extension}\">\n                  </a>\n                  <p class=\"text-center\">${title}<p>\n                </li>`;\n\n    document.querySelector('#hqs').innerHTML += li;\n  }\n\n  searchCharacter() {\n    const name = this.inputSearch.value.toUpperCase();\n    console.log(name);\n\n    (name.length >= 3) ? this.getCharacters(name) : swal('Please, type at least 03 letters to do a search.');\n  }\n  \n}\n\n\n\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}